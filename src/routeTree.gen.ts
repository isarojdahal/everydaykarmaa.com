/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";

// Create Virtual Routes

const SessionsLazyImport = createFileRoute("/sessions")();
const FeedbackLazyImport = createFileRoute("/feedback")();
const IndexLazyImport = createFileRoute("/")();

// Create/Update Routes

const SessionsLazyRoute = SessionsLazyImport.update({
  id: "/sessions",
  path: "/sessions",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/sessions.lazy").then((d) => d.Route));

const FeedbackLazyRoute = FeedbackLazyImport.update({
  id: "/feedback",
  path: "/feedback",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/feedback.lazy").then((d) => d.Route));

const IndexLazyRoute = IndexLazyImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/feedback": {
      id: "/feedback";
      path: "/feedback";
      fullPath: "/feedback";
      preLoaderRoute: typeof FeedbackLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/sessions": {
      id: "/sessions";
      path: "/sessions";
      fullPath: "/sessions";
      preLoaderRoute: typeof SessionsLazyImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexLazyRoute;
  "/feedback": typeof FeedbackLazyRoute;
  "/sessions": typeof SessionsLazyRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexLazyRoute;
  "/feedback": typeof FeedbackLazyRoute;
  "/sessions": typeof SessionsLazyRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexLazyRoute;
  "/feedback": typeof FeedbackLazyRoute;
  "/sessions": typeof SessionsLazyRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/feedback" | "/sessions";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/feedback" | "/sessions";
  id: "__root__" | "/" | "/feedback" | "/sessions";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute;
  FeedbackLazyRoute: typeof FeedbackLazyRoute;
  SessionsLazyRoute: typeof SessionsLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  FeedbackLazyRoute: FeedbackLazyRoute,
  SessionsLazyRoute: SessionsLazyRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/feedback",
        "/sessions"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/feedback": {
      "filePath": "feedback.lazy.tsx"
    },
    "/sessions": {
      "filePath": "sessions.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
